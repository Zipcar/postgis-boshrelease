#!/bin/bash -eu

export PIDNUM=$$

exec > >(tee -a >(logger -p user.info -t vcap.$(basename $0).stdout) | awk -W interactive '{ system("echo -n [$(date +\"%Y-%m-%d %H:%M:%S%z\")] $PIDNUM"); print " " $0 }' >> /var/vcap/sys/log/postgres/$(basename $0).log)
exec 2> >(tee -a >(logger -p user.error -t vcap.$(basename $0).stderr) | awk -W interactive '{ system("echo -n [$(date +\"%Y-%m-%d %H:%M:%S%z\")] $PIDNUM"); print " " $0 }' >> /var/vcap/sys/log/postgres/$(basename $0).err.log)

function main() {
  local action
  action="${1}"

  source /var/vcap/jobs/postgres/bin/utils.sh
  set +u
  source /var/vcap/packages/postgres-common/utils.sh
  set -u

  case "${action}" in
    "start")
      mkdir -p "${RUN_DIR}"
      pid_guard "${PGJANITOR_PIDFILE}" "Postgres Janitor"

      # wait for postgres to start for at most n seconds
      timeout <%= p("databases.monit_timeout") %> bash -c "while true; do
        ${PACKAGE_DIR}/bin/pg_isready -p ${PORT} -U vcap
        if [ "$?" == "0" ]; then
          exit 0
        fi
        sleep 1
      done"
      if [ "$?" != "0" ]; then
        echo "Failed while waiting for postgres to start"
        exit 1
      fi

      # update/create roles and databases
      create_roles
      create_databases

      echo $$ > "${PGJANITOR_PIDFILE}"
      exec ${JOB_DIR}/bin/pg_janitor.sh
      ;;

    "stop")
      echo "Stopping Postgres janitor"
      kill_and_wait "${PGJANITOR_PIDFILE}"
      ;;

    *)
      echo "Usage: ${0} {start|stop|status}"
      exit 1

      ;;

  esac
}

main "${1}"
